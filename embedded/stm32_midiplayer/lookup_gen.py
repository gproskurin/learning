#!/usr/bin/env python3
import math

DDS_VALUE_T = 'dds_value_t' # c++ type
DDS_INC_T = 'uint32_t'
DDS_FREQ = 48000 # keep in sync with C++ code

def dds_notes_incs():
    M = 2 ** (1/12)
    LEN = 12*9
    freqs = [440/(M**x) for x in range(57,0,-1)] + [440] + [440*(M**x) for x in range(1,51)]
    r = [round(2**32 * f / DDS_FREQ) for f in freqs]
    for x in r:
        assert x > 0
        assert x < 2**32 / 2
        assert len(r) == LEN
    return r


def sin_points(n):
    l = [
        math.floor(math.sin(x*2*math.pi/n)*65535/2 + 65536/2)
        for x in range(0, n)
    ]
    assert len(l) == n
    for x in l:
        assert x >= 0
        assert x < 65536
    return l


print('// Autogenerated file\n')

print('\nconst std::array<' + DDS_INC_T + ', 12*9> dds_notes_incs = {')
print(" " + ", ".join([str(i) for i in dds_notes_incs()]))
print('};')

# sin tables
for sz in [3, 4, 5, 10, 12]:
    count = 2**sz
    print(f'\n// sin{sz}')
    print(f'const std::array<{DDS_VALUE_T}, {count}> lookup_table_sin{sz} = ' + '{')
    print(f' ' + ", ".join([str(x) for x in sin_points(count)]))
    print('};\n')

